   ``````````````FIBONACCI NUMBER```````````````
   
   public static int fibo(int n){
       if(n<2){
           return n;
       }
       int fib1 = fibo(n-1);
       int fib2 = fibo(n-2);
       return fib1+fib2;
   }
   
   public static int fibo_tabulation(int n){
       int[] dp = new int[n+1];
       dp[0]=0;
       dp[1]=1;
       for(int i=2;i<=n;i++){
           dp[i] = dp[i-1]+dp[i-2];
       }
       return dp[n];
   }
   
   public static int fibo_memoization(int n,int[] dp){
       if(n<2){
           return dp[n]=n;
       }
       if(dp[n]!=0){
           return dp[n];
       }
       int fib1 = fibo_memoization(n-1,dp);
       int fib2 = fibo_memoization(n-2,dp);
       int ans = fib1+fib2;
       return dp[n]=ans;
   }
   
   `````````````CLIMB STAIRS NO OF PATHS```````````
   
   public static int countpath(int n){
       if(n<0){
           return 0;
       }
       if(n==0){
           return 1;
       }
       int c1 = countpath(n-1);
       int c2 = countpath(n-2);
       int c3 = countpath(n-3);
       return c1+c2+c3;
   }
   
   public static int countpath_tabulation(int n){
       int[] dp = new int[n+1];
       dp[0]=1;
       dp[1]=1;
       dp[2]=2;
       for(int i=3;i<=n;i++){
           dp[i] = dp[i-1]+dp[i-2]+dp[i-3];
       }
       return dp[n];
   }
   
   ``````````CLIMB STAIRS WITH VARIABLE JUMP`````   
   
   public static int climb_variablejump(int n,int[] jump){
       int[] dp = new int[n+1];
       dp[n]=1;
       
       for(int i=n-1;i>=0;i--){
           for(int j=1;j<=jump[i] && i+j<dp.length;j++){
              dp[i]+=dp[i+j]; 
           }
       }
       return dp[0];
   }
   
   `````````CLIMB STAIRS WITH MINIMUM MOVES`````
   
   public static int minimum_jump(int n,int[] jumps){
       Integer[] dp = new Integer[n+1];
       dp[n] = 0;
       
       for(int i=n-1;i>=0;i--){
           int minval = Integer.MAX_VALUE;
           for(int j=1;j<=jumps[i] && i+j<dp.length;j++){
               if(dp[i+j]!=null){
               minval = Math.min(dp[i+j],minval);
               }
           }
           if(minval!=Integer.MAX_VALUE){
               dp[i]=minval+1;
           }
       }
       return dp[0];
   }
   
   ``````````````MINIMUM COST PATH```````````
   
   public static int minimum_costpath(int[][] arr){
       int n = arr.length;
       int m = arr[0].length;
       int[][] dp = new int[n][m];
       for(int i=n-1;i>=0;i--){
           for(int j= m-1;j>=0;j--){
               if(i==n-1 && j==m-1){
                   dp[i][j] = arr[i][j];
               }
               else if(i==n-1){
                   dp[i][j] = arr[i][j] + dp[i][j+1];
               }
               else if(j==m-1){
                   dp[i][j] = arr[i][j] + dp[i+1][j];
               }
               else{
                   dp[i][j] = arr[i][j] + Math.min(dp[i+1][j],dp[i][j+1]);
               }
           }
       }
       return dp[0][0];
   }
   
   ```````````PATH WITH MAXIMUM GOLD````````
   
  public static int maxgold(int[][] arr){
        int[][] dp = new int[arr.length][arr[0].length];
        for(int j=arr[0].length-1;j>=0;j--){
            for(int i=arr.length-1;i>=0;i--){
                if(j==arr[0].length-1){
                    dp[i][j] = arr[i][j];
                }
                else if(i==0){
                    dp[i][j] = arr[i][j] + Math.max(dp[i][j+1],dp[i+1][j+1]);
                }
                else if(i==arr.length-1){
                    dp[i][j] = arr[i][j] + Math.max(dp[i][j+1],dp[i-1][j+1]);
                }
                else{
                    dp[i][j] = arr[i][j] +
                    Math.max(dp[i][j+1],Math.max(dp[i+1][j+1],dp[i-1][j+1]));
                }
            }
        }
        int maxval = dp[0][0];
        for(int i=1;i<dp.length;i++){
            maxval = Math.max(maxval,dp[i][0]);
        }
        return maxval;
    }
   
