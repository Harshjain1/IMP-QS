`````SECOND LARGEST ELEMENT IN AN ARRAY`

public static int secondLargest(int[] arr){
    int largest = 0;
    int res = -1;
    for(int i=1;i<arr.length;i++){
        if(arr[i]>arr[largest]){
            res = largest;
            largest = i;
        }
        else if(arr[i]<arr[largest]){
            if(res==-1 || arr[i]>arr[res]){
                res = i;
            }
        }
    }
    return arr[res];
}

```````MOVE ZEROS TO END```````

public static void movezero(int[] arr){
    int count = 0;
    for(int i=0;i<arr.length;i++){
        if(arr[i]!=0){
            int temp = arr[count];
            arr[count] = arr[i];
            arr[i] = temp;
            count++;
        }
    }
}

```````LEFT ROTATE ARRAY BY D PLACES`````

public static void leftrotate(int[] arr,int d){
    reverse(arr,0,d-1);
    reverse(arr,d,arr.length-1);
    reverse(arr,0,arr.length-1);
}

`````````LEADERS IN AN ARRAY``````````

public static void leaders(int[] arr){
    int curr_ldr = arr[arr.length-1];
    System.out.print(curr_ldr);
    for(int i=arr.length-2;i>=0;i--){
        if(arr[i]>curr_ldr){
            curr_ldr = arr[i];
            System.out.print(curr_ldr);
        }
    }
    return ;
}

`````````FREQUENCY IN AN SORTED ARRAY`````

public static void frequencyprint(int[] arr){
    int i=1;
    int freq=1;
    while(i<arr.length){
        while(i<arr.length && arr[i]==arr[i-1]){
            i++;
            freq++;
        }
        System.out.print(arr[i-1] + " " + freq);
        i++;
        freq = 1;
    }
    return ;
}

``````````MAXIMUM DIFFERENCE PROBLEM WITH ORDER```````

public static int maxdiff(int[] arr){
    int minval = arr[0];
    int maxdiff = arr[1]-arr[0];
    for(int i=1;i<arr.length;i++){
        maxdiff = Math.max(maxdiff,arr[i]-minval);
        minval = Math.min(minval,arr[i]);
    }
    return minval;
}

`````````TRAPPING RAIN WATER```````````

public static int trapping(int[] arr){
    int[] lmax = new int[arr.length];
    int[] rmax = new int[arr.length];
    lmax[0]=arr[0];
    for(int i=1;i<arr.length;i++){
        lmax[i] = Math.max(lmax[i-1],arr[i]);
    }
    rmax[arr.length-1]=arr[arr.length-1];
    for(int i=arr.length-2;i>=0;i--){
        rmax[i] = Math.max(rmax[i+1],arr[i]);
    }
    int res = 0;
    for(int i=1;i<arr.length-1;i++){
        res += Math.min(lmax[i],rmax[i])-arr[i];
    }
    return res;
}

`````````MAXIMUM SUBARRAY SUM`````````

public static int maxsum(int[] arr){
    int maxending = arr[0];
    int maxsum = arr[0];
    for(int i=1;i<arr.length;i++){
        maxending = Math.max(maxending+arr[i],arr[i]);
        maxsum = Math.max(maxending,maxsum);
    }
    return maxsum;
}

```````CIRCULAR SUM SUBARRAY````````

public static int circularsum(int[] arr){
    int max_normal = maxsum(arr);
    if(max_normal<0){
        return max_normal;
    }
    int sum = 0;
    for(int i=0;i<arr.length;i++){
        sum += arr[i];
        arr[i] = -arr[i];
    }
    int max_circular = sum + maxsum(arr);
    return Math.max(max_circular,max_normal);
}

```````MAJORITY ELEMENT````````

public static int majorty(int[] arr){
    int ele = 0;
    int count = 0;
    for(int i=0;i<arr.length;i++){
        if(count==0){
            ele = arr[i];
            count+=1;
        }
        else if(ele == arr[i]){
            count += 1;
        }
        else{
            count -= 1;
        }
    }
    return ele;
}

```````MAJORITY ELEMENT II```````

public static int majority(int[] arr){
    int c1 = 0;
    int c2 = 0;
    int ele1 = 0;
    int ele2 = 0;
    for(int i=0;i<arr.length;i++){
        if(c1==0){
            c1 += 1;
            ele1 = arr[i];
        }
        else if(c2==0){
            ele2 = arr[i];
            c2 += 1;
        }
        else if(ele1==arr[i]){
            c1++;
        }
        else if(ele2==arr[i]){
            c2++;
        }
        else{
            c1-=1;
            c2-=1;
        }
    }
    System.out.print(ele1 +" " + ele2);
    return ;
}

```````MINIMUM CONSECCUTIVE FLIPS````

public static void printGroups(int arr[], int n){
    for(int i = 1; i < n; i++){
		if(arr[i] != arr[i - 1]){
    		if(arr[i] != arr[0])
                System.out.print("From " + i + " to ");
    		else
                System.out.println(i - 1);
    		}
    	}
    if(arr[n - 1] != arr[0])
        System.out.println(n-1);
}

`````FIND SUBARRAY WITH GIVEN SUM``````

public static void subarray(int[] arr,int sum){
    int curr_sum = arr[0];
    int start = 0;
    for(int i=1;i<=arr.length;i++){
        while(curr_sum > sum && start<i-1){
            curr_sum -= arr[start];
            start++;
        }
        if(curr_sum==sum){
            System.out.print("sum found b/w" + start +"-"+i-1);
        }
        if(i<arr.length){
            curr_sum += arr[i];
        }
    }
    return ;
}

````````NBONACCISERIES```````

public static void nbonacci(int n,int m){
    int[] arr = new int[m];
    arr[n-1] = 1;
    arr[n] = 1;
    for(int i=n+1;i<m;i++){
        arr[i] = 2*arr[i-1] - arr[i-n-1];
    }
}

`````````MAXIMUM OCCURING ELEMENT``````

public static int maxoccuring(int[] left,int[] right){
    int[] arr = new int[1000];
    for(int i=0;i<left.length;i++){
        arr[left[i]]++;
        arr[right[i]+1]--;
    }
    int maxm = arr[0],res = 0;
    for(int i=1;i<1000;i++){
        arr[i] += arr[i-1];
        if(arr[i]>maxm){
            maxm = arr[i];
            res = i;
        }
    }
    return res;
}

``````````EQUILIBRIUM POINT`````````

public static int eqbpoint(int[] arr){
    int sum = 0;
    for(int i=0;i<arr.length;i++){
        sum += arr[i];
    }
    int lsum = 0;
    for(int i=0;i<arr.length;i++){
        if(lsum == sum-arr[i]){
            return i;
        }
        lsum += arr[i];
        sum -= arr[i];
    }
    return -1;
}

````````MAXIMUM SUM OF K CONSECUTIVE ELEMENTS```````

public static int maxsum(int[] arr,int k){
    int sum = 0;
    for(int i=0;i<k;i++){
        sum += arr[i];
    }
    int maxsum = sum;
    for(int i=k;i<arr.length;i++){
        sum += arr[i]-arr[i-k];
        maxsum = Math.max(maxsum,sum);
    }
    return maxsum;
}

  
  ````````````SUM OF TWO ARRAYS`````````````````   
     
  public static void sumOfTwoArray(int[] arr1, int[] arr2) {
        int n = arr1.length;
        int m = arr2.length;
        int p = Math.max(n, m) + 1;
        int[] ans = new int[p];

        int i = n - 1, j = m - 1, k = p - 1, carry = 0;
        while (k >= 0) {
            int sum = carry + (i >= 0 ? arr1[i] : 0) + (j >= 0 ? arr2[j] : 0);
            ans[k] = sum % 10;
            carry = sum / 10;

            i--;
            j--;
            k--;
        }
    }

  ``````````PRINT ALL SUBARRAYS`````````````````

  public static void printAllSubArrays(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                printInRange(arr, i, j);
            }
        }
    }
   
  ````````````````BINARY SEARCH```````````````````
   
  public static int binarySearch(int[] arr,int data){
        int lo = 0;
        int hi = arr.length-1;
        while(lo<=hi){
            int mid = lo + (hi-lo)/2;
            if(arr[mid]==data){
                return mid;
            }
            else if(arr[mid]>data){
                hi = mid-1;
            }
            else{
                lo = mid+1;
            }
        }
        return -1;
    }
    
  ```````````FIRST INDEX USING BINARY SEARCH`````````
  
  public static int firstIndex(int[] arr, int data) {
        int si = 0, ei = arr.length - 1;
        while (si <= ei) {
            int mid = (si + ei) / 2;
            if (arr[mid] == data) {
                if (mid - 1 >= 0 && arr[mid - 1] == data)
                    ei = mid - 1;
                else
                    return mid;
            } else if (data < arr[mid])
                ei = mid - 1;
            else
                si = mid + 1;
        }

        return -1;
    }

  ````````````LAST INDEX USING BINARY SEARCH`````````

  public static int lastIndex(int[] arr, int data) {
        int n = arr.length;
        int si = 0, ei = n - 1;
        while (si <= ei) {
            int mid = (si + ei) / 2;
            if (arr[mid] == data) {
                if (mid + 1 < n && arr[mid + 1] == data)
                    si = mid + 1;
                else
                    return mid;
            } else if (data < arr[mid])
                ei = mid - 1;
            else
                si = mid + 1;
        }

        return -1;
    }

  ```````````````SUBTRACT BETWEEN TWO ARRAYS``````````

  public static void subtractOfTwoArray(int[] arr1, int[] arr2){
        int n = arr1.length;
        int m = arr2.length;
        int[] ans = new int[m];
        int i = n - 1, j = m - 1, k = m - 1;
        int borrow = 0;
        while (k >= 0) {
            int diff = borrow + arr2[j] - (i >= 0 ? arr1[i] : 0);
            if (diff < 0) {
                diff += 10;
                borrow = -1;
            } else {
                borrow = 0;
            }
            ans[k] = diff;
            i--;
            j--;
            k--;
        }
    }
    
  ```````````BENJAMIN BULBS`````````

  public static void benjaminBulbs(int n){
    for(int i=1;i*i<=n;i++){
        System.out.print(i*i);
    }
  }
  
   ``````````````ROTATE A NUMBER`````````

  public static int rotateanumber(int n,int r){
      int mul = 1;
      int div = 1;
      int len = countdigits(n);
      r %= len;
      if(r<0){
          r += len;
      }
      for(int i=1;i<=len;i++){
          if(i<=r){
              div *= 10;
          }
          else{
              mul *= 10;
          }
      }
      int a = n/div;
      int b = n%div;
      return b*mul + a;
  }
  
  ``````SQUARE ROOT OF A NUMBER```````

  METHOD I

  public static int sqrt(int n){
    int i = 1;
    while(i*i<=n){
        i++;
    }
    return i-1;
  }
  
  METHOD II
  
  public static int sqrt(int n){
      int lo = 1;
      int hi = n;
      int ans = 1;
      while(lo<=hi){
          int mid = (lo + hi)/2;
          int sq = mid*mid;
          if(sq==n){
              return mid;
          }
          else if(sq>n){
              hi = mid-1;
          }
          else{
              lo = mid+1;
              ans = mid;
          }
      }
      return ans;
  }
  
  ``````SEARCH IN INFINITE SIZE ARRAY````
  
  METHOD I
  
  public static int find(int[] arr,int x){
      int i = 0;
      while(true){
          if(arr[i]==x){
              return i;
          }
          if(arr[i]>x){
              return -1;
          }
          i++;
      }
  }
  
  METHOD II
  
  public static int find(int[] arr,int x){
      if(arr[0]==x){
          return 0;
      }
      int i=1;
      while(arr[i]<x){
          i *= 2;
      }
      return search(arr,i/2+1,i,x);
  }
  
  public static int search(int[] arr,int lo,int hi,int x){
      
      int st = li,end=hi;
      while(st<=end){
          int mid = (st+end)/2;
          if(arr[mid]==x){
              return mid;
          }
          else if(arr[mid]>x){
              end = mid-1;
          }
          else {
              st = mid+1;
          }
      }
      return -1;
  }
  
 ```````PRINT IN PATTERN FROM MATRIX```````````
    
    public static void stateOfWakanda_FB(int[][] arr) {
        int n = arr.length, m = arr[0].length;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                for (int j = 0; j < m; j++)
                    System.out.println(arr[i][j]);
            } else {
                for (int j = m - 1; j >= 0; j--)
                    System.out.println(arr[i][j]);
            }
        }
    }

    ````PRINT DIAGONAL ELEMENTS OF AN MATRIX```````
    
    public static void diagonalPrint(int[][] arr) {
        int n = arr.length, m = arr[0].length;
        for (int gap = 0; gap < m; gap++) {
            for (int i = 0, j = gap; i < n && j < m; i++, j++) {
                System.out.println(arr[i][j]);
            }
        }
    }
    
    public static void FulldiagonalPrint(int[][] arr) {
        int n = arr.length, m = arr[0].length;
        for (int gap = n - 1; gap >= 1; gap--) {
            for (int i = gap, j = 0; i < n && j < m; i++, j++) {
                System.out.println(arr[i][j]);
            }
        }

        for (int gap = 0; gap < m; gap++) {
            for (int i = 0, j = gap; i < n && j < m; i++, j++) {
                System.out.println(arr[i][j]);
            }
        }
    }

    ```````SPIRAL TRAVERSAL OF AN MATRIX```````
    
    public static void spiralPrint(int[][] arr) {
        int n = arr.length, m = arr[0].length;
        int rmin = 0, rmax = n - 1;
        int cmin = 0, cmax = m - 1;
        int tnel = n * m;

        while (tnel > 0) {
            for (int r = rmin; r <= rmax && tnel > 0; r++) {
                System.out.println(arr[r][cmin]);
                tnel--;
            }
            cmin++;

            for (int c = cmin; c <= cmax && tnel > 0; c++) {
                System.out.println(arr[rmax][c]);
                tnel--;
            }
            rmax--;

            for (int r = rmax; r >= rmin && tnel > 0; r--) {
                System.out.println(arr[r][cmax]);
                tnel--;
            }
            cmax--;

            for (int c = cmax; c >= cmin && tnel > 0; c--) {
                System.out.println(arr[rmin][c]);
                tnel--;
            }
            rmin++;
        }
    }

    ````````EXIT POINT OF AN MATRIX```````
    
    public static void exitPoint(int[][] arr) {
        int n = arr.length, m = arr[0].length;
        int dir = 0;
        int i = 0, j = 0;
        while (true) {
            dir = (dir + arr[i][j]) % 4;
            if (dir == 0) { // North
                j++;
                if (j == m) {
                    System.out.println(i + "\n" + (j - 1));
                    break;
                }
            } else if (dir == 1) { // East
                i++;
                if (i == n) {
                    System.out.println((i - 1) + "\n" + (j));
                    break;
                }
            } else if (dir == 2) { // South
                j--;
                if (j == -1) {
                    System.out.println((i) + "\n" + (j + 1));
                    break;
                }
            } else { // West
                i--;
                if (i == -1) {
                    System.out.println((i + 1) + "\n" + (j));
                    break;
                }
            }
        }
    }

    ````````ROTATE AN MATRIX BY 90 DEGREE```````
    
    public static void rotate90(int[][] arr) {
        int n = arr.length, m = arr[0].length;
        // Transpose
        for (int i = 0; i < n; i++) {
            for (int j = i; j < m; j++) {
                int temp = arr[i][j];
                arr[i][j] = arr[j][i];
                arr[j][i] = temp;
            }
        }

        // column shifting
        int si = 0, ei = m - 1;
        while (si < ei) {
            for (int i = 0; i < n; i++) {
                int temp = arr[i][si];
                arr[i][si] = arr[i][ei];
                arr[i][ei] = temp;
            }
            si++;
            ei--;
        }
    }
    `````````````````SADDLE POINT`````````````
    
    public static void saddlePoint(int[][] arr) {
        int n = arr.length, m = arr[0].length;
        boolean flag = false;
        for (int i = 0; i < n; i++) {
            // find min in row
            int minVal = (int) 1e9;
            int c = -1;
            for (int j = 0; j < m; j++) {
                if (arr[i][j] < minVal) {
                    minVal = arr[i][j];
                    c = j;
                }
            }

            int r = maxInCol(arr, c);

            if (r == i) {
                System.out.println(arr[r][c]);
                flag = true;
            }
        }

        if (!flag)
            System.out.println("Invalid input");
    }

    public static int maxInCol(int[][] arr, int c) {
        int maxVal = -(int) 1e9;
        int r = -1;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i][c] > maxVal) {
                maxVal = arr[i][c];
                r = i;
            }
        }

        return r;
    }
