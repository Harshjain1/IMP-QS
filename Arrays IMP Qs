`````SECOND LARGEST ELEMENT IN AN ARRAY`

public static int secondLargest(int[] arr){
    int largest = 0;
    int res = -1;
    for(int i=1;i<arr.length;i++){
        if(arr[i]>arr[largest]){
            res = largest;
            largest = i;
        }
        else if(arr[i]<arr[largest]){
            if(res==-1 || arr[i]>arr[res]){
                res = i;
            }
        }
    }
    return arr[res];
}

```````MOVE ZEROS TO END```````

public static void movezero(int[] arr){
    int count = 0;
    for(int i=0;i<arr.length;i++){
        if(arr[i]!=0){
            int temp = arr[count];
            arr[count] = arr[i];
            arr[i] = temp;
            count++;
        }
    }
}

```````LEFT ROTATE ARRAY BY D PLACES`````

public static void leftrotate(int[] arr,int d){
    reverse(arr,0,d-1);
    reverse(arr,d,arr.length-1);
    reverse(arr,0,arr.length-1);
}

`````````LEADERS IN AN ARRAY``````````

public static void leaders(int[] arr){
    int curr_ldr = arr[arr.length-1];
    System.out.print(curr_ldr);
    for(int i=arr.length-2;i>=0;i--){
        if(arr[i]>curr_ldr){
            curr_ldr = arr[i];
            System.out.print(curr_ldr);
        }
    }
    return ;
}

`````````FREQUENCY IN AN SORTED ARRAY`````

public static void frequencyprint(int[] arr){
    int i=1;
    int freq=1;
    while(i<arr.length){
        while(i<arr.length && arr[i]==arr[i-1]){
            i++;
            freq++;
        }
        System.out.print(arr[i-1] + " " + freq);
        i++;
        freq = 1;
    }
    return ;
}

``````````MAXIMUM DIFFERENCE PROBLEM WITH ORDER```````

public static int maxdiff(int[] arr){
    int minval = arr[0];
    int maxdiff = arr[1]-arr[0];
    for(int i=1;i<arr.length;i++){
        maxdiff = Math.max(maxdiff,arr[i]-minval);
        minval = Math.min(minval,arr[i]);
    }
    return minval;
}

`````````TRAPPING RAIN WATER```````````

public static int trapping(int[] arr){
    int[] lmax = new int[arr.length];
    int[] rmax = new int[arr.length];
    lmax[0]=arr[0];
    for(int i=1;i<arr.length;i++){
        lmax[i] = Math.max(lmax[i-1],arr[i]);
    }
    rmax[arr.length-1]=arr[arr.length-1];
    for(int i=arr.length-2;i>=0;i--){
        rmax[i] = Math.max(rmax[i+1],arr[i]);
    }
    int res = 0;
    for(int i=1;i<arr.length-1;i++){
        res += Math.min(lmax[i],rmax[i])-arr[i];
    }
    return res;
}

`````````MAXIMUM SUBARRAY SUM`````````

public static int maxsum(int[] arr){
    int maxending = arr[0];
    int maxsum = arr[0];
    for(int i=1;i<arr.length;i++){
        maxending = Math.max(maxending+arr[i],arr[i]);
        maxsum = Math.max(maxending,maxsum);
    }
    return maxsum;
}

```````CIRCULAR SUM SUBARRAY````````

public static int circularsum(int[] arr){
    int max_normal = maxsum(arr);
    if(max_normal<0){
        return max_normal;
    }
    int sum = 0;
    for(int i=0;i<arr.length;i++){
        sum += arr[i];
        arr[i] = -arr[i];
    }
    int max_circular = sum + maxsum(arr);
    return Math.max(max_circular,max_normal);
}

```````MAJORITY ELEMENT````````

public static int majorty(int[] arr){
    int ele = 0;
    int count = 0;
    for(int i=0;i<arr.length;i++){
        if(count==0){
            ele = arr[i];
            count+=1;
        }
        else if(ele == arr[i]){
            count += 1;
        }
        else{
            count -= 1;
        }
    }
    return ele;
}

```````MAJORITY ELEMENT II```````

public static int majority(int[] arr){
    int c1 = 0;
    int c2 = 0;
    int ele1 = 0;
    int ele2 = 0;
    for(int i=0;i<arr.length;i++){
        if(c1==0){
            c1 += 1;
            ele1 = arr[i];
        }
        else if(c2==0){
            ele2 = arr[i];
            c2 += 1;
        }
        else if(ele1==arr[i]){
            c1++;
        }
        else if(ele2==arr[i]){
            c2++;
        }
        else{
            c1-=1;
            c2-=1;
        }
    }
    System.out.print(ele1 +" " + ele2);
    return ;
}
